# Generated by Django 4.0.2 on 2022-03-07 16:42

from django.db import migrations, models, NotSupportedError
from django.conf import settings


def forwards_func(apps, schema_editor):
    migrations_fp = settings.BASE_DIR / 'monitoreo/migrations'
    if schema_editor.connection.vendor.startswith("sqlite"):
        with open(migrations_fp / 'delete_status_sqlite.sql', 'r') as file:
            script = file.read()
    elif schema_editor.connection.vendor.startswith("mysql"):
        with open(migrations_fp / 'delete_status_mysql.sql', 'r') as file:
            script = "".join(file.read().splitlines())
    else:
        raise NotSupportedError(f"Unsupported vendor: {schema_editor.connection.vendor}")
    statements = script.split(';')
    [schema_editor.execute(query) for query in statements[:-1]]


def backwards_func(apps, schema_editor):
    migrations_fp = settings.BASE_DIR / 'monitoreo/migrations'
    if schema_editor.connection.vendor.startswith("sqlite"):
        with open(migrations_fp / 'delete_status_reverse_sqlite.sql', 'r') as file:
            script = file.read()
    elif schema_editor.connection.vendor.startswith("mysql"):
        with open(migrations_fp / 'delete_status_reverse_mysql.sql', 'r') as file:
            script = "".join(file.read().splitlines())
    else:
        raise NotSupportedError(f"Unsupported vendor: {schema_editor.connection.vendor}")
    statements = script.split(';')
    [schema_editor.execute(query) for query in statements[:-1]]


class Migration(migrations.Migration):
    dependencies = [
        ('todos_los_nodos', '0006_ipdevice_alive_lastalive'),
        ('monitoreo', '0001_initial'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=forwards_func,
                    reverse_code=backwards_func
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name='watchlist',
                    name='devices',
                    field=models.ManyToManyField(limit_choices_to=models.Q(('ip__isnull', False)),
                                                 to='todos_los_nodos.IPDevice', verbose_name='device'),
                ),
                migrations.DeleteModel(
                    name='Status',
                ),
            ]
        ),
    ]
